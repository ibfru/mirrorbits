// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.9.0
// source: rpc.proto

package rpc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ScanMirrorRequest_Method int32

const (
	ScanMirrorRequest_ALL   ScanMirrorRequest_Method = 0
	ScanMirrorRequest_FTP   ScanMirrorRequest_Method = 1
	ScanMirrorRequest_RSYNC ScanMirrorRequest_Method = 2
)

// Enum value maps for ScanMirrorRequest_Method.
var (
	ScanMirrorRequest_Method_name = map[int32]string{
		0: "ALL",
		1: "FTP",
		2: "RSYNC",
	}
	ScanMirrorRequest_Method_value = map[string]int32{
		"ALL":   0,
		"FTP":   1,
		"RSYNC": 2,
	}
)

func (x ScanMirrorRequest_Method) Enum() *ScanMirrorRequest_Method {
	p := new(ScanMirrorRequest_Method)
	*p = x
	return p
}

func (x ScanMirrorRequest_Method) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScanMirrorRequest_Method) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_proto_enumTypes[0].Descriptor()
}

func (ScanMirrorRequest_Method) Type() protoreflect.EnumType {
	return &file_rpc_proto_enumTypes[0]
}

func (x ScanMirrorRequest_Method) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScanMirrorRequest_Method.Descriptor instead.
func (ScanMirrorRequest_Method) EnumDescriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{11, 0}
}

type VersionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version    string `protobuf:"bytes,1,opt,name=Version,proto3" json:"Version,omitempty"`
	Build      string `protobuf:"bytes,2,opt,name=Build,proto3" json:"Build,omitempty"`
	GoVersion  string `protobuf:"bytes,3,opt,name=GoVersion,proto3" json:"GoVersion,omitempty"`
	OS         string `protobuf:"bytes,4,opt,name=OS,proto3" json:"OS,omitempty"`
	Arch       string `protobuf:"bytes,5,opt,name=Arch,proto3" json:"Arch,omitempty"`
	GoMaxProcs int32  `protobuf:"varint,6,opt,name=GoMaxProcs,proto3" json:"GoMaxProcs,omitempty"`
}

func (x *VersionReply) Reset() {
	*x = VersionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionReply) ProtoMessage() {}

func (x *VersionReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionReply.ProtoReflect.Descriptor instead.
func (*VersionReply) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *VersionReply) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *VersionReply) GetBuild() string {
	if x != nil {
		return x.Build
	}
	return ""
}

func (x *VersionReply) GetGoVersion() string {
	if x != nil {
		return x.GoVersion
	}
	return ""
}

func (x *VersionReply) GetOS() string {
	if x != nil {
		return x.OS
	}
	return ""
}

func (x *VersionReply) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *VersionReply) GetGoMaxProcs() int32 {
	if x != nil {
		return x.GoMaxProcs
	}
	return 0
}

type MatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pattern string `protobuf:"bytes,1,opt,name=Pattern,proto3" json:"Pattern,omitempty"`
}

func (x *MatchRequest) Reset() {
	*x = MatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchRequest) ProtoMessage() {}

func (x *MatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchRequest.ProtoReflect.Descriptor instead.
func (*MatchRequest) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *MatchRequest) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

type Mirror struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                   int32                `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name                 string               `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	HttpURL              string               `protobuf:"bytes,3,opt,name=HttpURL,proto3" json:"HttpURL,omitempty"`
	RsyncURL             string               `protobuf:"bytes,4,opt,name=RsyncURL,proto3" json:"RsyncURL,omitempty"`
	FtpURL               string               `protobuf:"bytes,5,opt,name=FtpURL,proto3" json:"FtpURL,omitempty"`
	SponsorName          string               `protobuf:"bytes,6,opt,name=SponsorName,proto3" json:"SponsorName,omitempty"`
	SponsorURL           string               `protobuf:"bytes,7,opt,name=SponsorURL,proto3" json:"SponsorURL,omitempty"`
	SponsorLogoURL       string               `protobuf:"bytes,8,opt,name=SponsorLogoURL,proto3" json:"SponsorLogoURL,omitempty"`
	AdminName            string               `protobuf:"bytes,9,opt,name=AdminName,proto3" json:"AdminName,omitempty"`
	AdminEmail           string               `protobuf:"bytes,10,opt,name=AdminEmail,proto3" json:"AdminEmail,omitempty"`
	CustomData           string               `protobuf:"bytes,11,opt,name=CustomData,proto3" json:"CustomData,omitempty"`
	ContinentOnly        bool                 `protobuf:"varint,12,opt,name=ContinentOnly,proto3" json:"ContinentOnly,omitempty"`
	CountryOnly          bool                 `protobuf:"varint,13,opt,name=CountryOnly,proto3" json:"CountryOnly,omitempty"`
	ASOnly               bool                 `protobuf:"varint,14,opt,name=ASOnly,proto3" json:"ASOnly,omitempty"`
	Score                int32                `protobuf:"varint,15,opt,name=Score,proto3" json:"Score,omitempty"`
	Latitude             float32              `protobuf:"fixed32,16,opt,name=Latitude,proto3" json:"Latitude,omitempty"`
	Longitude            float32              `protobuf:"fixed32,17,opt,name=Longitude,proto3" json:"Longitude,omitempty"`
	ContinentCode        string               `protobuf:"bytes,18,opt,name=ContinentCode,proto3" json:"ContinentCode,omitempty"`
	CountryCodes         string               `protobuf:"bytes,19,opt,name=CountryCodes,proto3" json:"CountryCodes,omitempty"`
	ExcludedCountryCodes string               `protobuf:"bytes,20,opt,name=ExcludedCountryCodes,proto3" json:"ExcludedCountryCodes,omitempty"`
	Asnum                uint32               `protobuf:"varint,21,opt,name=Asnum,proto3" json:"Asnum,omitempty"`
	Comment              string               `protobuf:"bytes,22,opt,name=Comment,proto3" json:"Comment,omitempty"`
	Enabled              bool                 `protobuf:"varint,23,opt,name=Enabled,proto3" json:"Enabled,omitempty"`
	Up                   bool                 `protobuf:"varint,24,opt,name=Up,proto3" json:"Up,omitempty"`
	ExcludeReason        string               `protobuf:"bytes,25,opt,name=ExcludeReason,proto3" json:"ExcludeReason,omitempty"`
	StateSince           *timestamp.Timestamp `protobuf:"bytes,26,opt,name=StateSince,proto3" json:"StateSince,omitempty"`
	AllowRedirects       int32                `protobuf:"varint,27,opt,name=AllowRedirects,proto3" json:"AllowRedirects,omitempty"`
	LastSync             *timestamp.Timestamp `protobuf:"bytes,28,opt,name=LastSync,proto3" json:"LastSync,omitempty"`
	LastSuccessfulSync   *timestamp.Timestamp `protobuf:"bytes,29,opt,name=LastSuccessfulSync,proto3" json:"LastSuccessfulSync,omitempty"`
	LastModTime          *timestamp.Timestamp `protobuf:"bytes,30,opt,name=LastModTime,proto3" json:"LastModTime,omitempty"`
	Country              string               `protobuf:"bytes,31,opt,name=Country,proto3" json:"Country,omitempty"`
	NetworkBandwidth     int32                `protobuf:"varint,32,opt,name=NetworkBandwidth,proto3" json:"NetworkBandwidth,omitempty"`
}

func (x *Mirror) Reset() {
	*x = Mirror{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mirror) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mirror) ProtoMessage() {}

func (x *Mirror) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mirror.ProtoReflect.Descriptor instead.
func (*Mirror) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{2}
}

func (x *Mirror) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Mirror) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Mirror) GetHttpURL() string {
	if x != nil {
		return x.HttpURL
	}
	return ""
}

func (x *Mirror) GetRsyncURL() string {
	if x != nil {
		return x.RsyncURL
	}
	return ""
}

func (x *Mirror) GetFtpURL() string {
	if x != nil {
		return x.FtpURL
	}
	return ""
}

func (x *Mirror) GetSponsorName() string {
	if x != nil {
		return x.SponsorName
	}
	return ""
}

func (x *Mirror) GetSponsorURL() string {
	if x != nil {
		return x.SponsorURL
	}
	return ""
}

func (x *Mirror) GetSponsorLogoURL() string {
	if x != nil {
		return x.SponsorLogoURL
	}
	return ""
}

func (x *Mirror) GetAdminName() string {
	if x != nil {
		return x.AdminName
	}
	return ""
}

func (x *Mirror) GetAdminEmail() string {
	if x != nil {
		return x.AdminEmail
	}
	return ""
}

func (x *Mirror) GetCustomData() string {
	if x != nil {
		return x.CustomData
	}
	return ""
}

func (x *Mirror) GetContinentOnly() bool {
	if x != nil {
		return x.ContinentOnly
	}
	return false
}

func (x *Mirror) GetCountryOnly() bool {
	if x != nil {
		return x.CountryOnly
	}
	return false
}

func (x *Mirror) GetASOnly() bool {
	if x != nil {
		return x.ASOnly
	}
	return false
}

func (x *Mirror) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Mirror) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Mirror) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Mirror) GetContinentCode() string {
	if x != nil {
		return x.ContinentCode
	}
	return ""
}

func (x *Mirror) GetCountryCodes() string {
	if x != nil {
		return x.CountryCodes
	}
	return ""
}

func (x *Mirror) GetExcludedCountryCodes() string {
	if x != nil {
		return x.ExcludedCountryCodes
	}
	return ""
}

func (x *Mirror) GetAsnum() uint32 {
	if x != nil {
		return x.Asnum
	}
	return 0
}

func (x *Mirror) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Mirror) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Mirror) GetUp() bool {
	if x != nil {
		return x.Up
	}
	return false
}

func (x *Mirror) GetExcludeReason() string {
	if x != nil {
		return x.ExcludeReason
	}
	return ""
}

func (x *Mirror) GetStateSince() *timestamp.Timestamp {
	if x != nil {
		return x.StateSince
	}
	return nil
}

func (x *Mirror) GetAllowRedirects() int32 {
	if x != nil {
		return x.AllowRedirects
	}
	return 0
}

func (x *Mirror) GetLastSync() *timestamp.Timestamp {
	if x != nil {
		return x.LastSync
	}
	return nil
}

func (x *Mirror) GetLastSuccessfulSync() *timestamp.Timestamp {
	if x != nil {
		return x.LastSuccessfulSync
	}
	return nil
}

func (x *Mirror) GetLastModTime() *timestamp.Timestamp {
	if x != nil {
		return x.LastModTime
	}
	return nil
}

func (x *Mirror) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Mirror) GetNetworkBandwidth() int32 {
	if x != nil {
		return x.NetworkBandwidth
	}
	return 0
}

type MirrorListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mirrors []*Mirror `protobuf:"bytes,1,rep,name=Mirrors,proto3" json:"Mirrors,omitempty"`
}

func (x *MirrorListReply) Reset() {
	*x = MirrorListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MirrorListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MirrorListReply) ProtoMessage() {}

func (x *MirrorListReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MirrorListReply.ProtoReflect.Descriptor instead.
func (*MirrorListReply) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *MirrorListReply) GetMirrors() []*Mirror {
	if x != nil {
		return x.Mirrors
	}
	return nil
}

type MirrorID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID   int32  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *MirrorID) Reset() {
	*x = MirrorID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MirrorID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MirrorID) ProtoMessage() {}

func (x *MirrorID) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MirrorID.ProtoReflect.Descriptor instead.
func (*MirrorID) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{4}
}

func (x *MirrorID) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *MirrorID) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type MatchReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mirrors []*MirrorID `protobuf:"bytes,1,rep,name=Mirrors,proto3" json:"Mirrors,omitempty"`
}

func (x *MatchReply) Reset() {
	*x = MatchReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchReply) ProtoMessage() {}

func (x *MatchReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchReply.ProtoReflect.Descriptor instead.
func (*MatchReply) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{5}
}

func (x *MatchReply) GetMirrors() []*MirrorID {
	if x != nil {
		return x.Mirrors
	}
	return nil
}

type ChangeStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      int32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Enabled bool  `protobuf:"varint,2,opt,name=Enabled,proto3" json:"Enabled,omitempty"`
}

func (x *ChangeStatusRequest) Reset() {
	*x = ChangeStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeStatusRequest) ProtoMessage() {}

func (x *ChangeStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeStatusRequest.ProtoReflect.Descriptor instead.
func (*ChangeStatusRequest) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{6}
}

func (x *ChangeStatusRequest) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ChangeStatusRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type MirrorIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID int32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *MirrorIDRequest) Reset() {
	*x = MirrorIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MirrorIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MirrorIDRequest) ProtoMessage() {}

func (x *MirrorIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MirrorIDRequest.ProtoReflect.Descriptor instead.
func (*MirrorIDRequest) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{7}
}

func (x *MirrorIDRequest) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

type AddMirrorReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude         float32  `protobuf:"fixed32,1,opt,name=Latitude,proto3" json:"Latitude,omitempty"`
	Longitude        float32  `protobuf:"fixed32,2,opt,name=Longitude,proto3" json:"Longitude,omitempty"`
	Country          string   `protobuf:"bytes,3,opt,name=Country,proto3" json:"Country,omitempty"`
	Continent        string   `protobuf:"bytes,4,opt,name=Continent,proto3" json:"Continent,omitempty"`
	ASN              string   `protobuf:"bytes,5,opt,name=ASN,proto3" json:"ASN,omitempty"`
	Warnings         []string `protobuf:"bytes,6,rep,name=Warnings,proto3" json:"Warnings,omitempty"`
	NetworkBandwidth int32    `protobuf:"varint,7,opt,name=NetworkBandwidth,proto3" json:"NetworkBandwidth,omitempty"`
}

func (x *AddMirrorReply) Reset() {
	*x = AddMirrorReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMirrorReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMirrorReply) ProtoMessage() {}

func (x *AddMirrorReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMirrorReply.ProtoReflect.Descriptor instead.
func (*AddMirrorReply) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{8}
}

func (x *AddMirrorReply) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *AddMirrorReply) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *AddMirrorReply) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *AddMirrorReply) GetContinent() string {
	if x != nil {
		return x.Continent
	}
	return ""
}

func (x *AddMirrorReply) GetASN() string {
	if x != nil {
		return x.ASN
	}
	return ""
}

func (x *AddMirrorReply) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *AddMirrorReply) GetNetworkBandwidth() int32 {
	if x != nil {
		return x.NetworkBandwidth
	}
	return 0
}

type UpdateMirrorReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Diff string `protobuf:"bytes,1,opt,name=Diff,proto3" json:"Diff,omitempty"`
}

func (x *UpdateMirrorReply) Reset() {
	*x = UpdateMirrorReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMirrorReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMirrorReply) ProtoMessage() {}

func (x *UpdateMirrorReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMirrorReply.ProtoReflect.Descriptor instead.
func (*UpdateMirrorReply) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateMirrorReply) GetDiff() string {
	if x != nil {
		return x.Diff
	}
	return ""
}

type RefreshRepositoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rehash bool `protobuf:"varint,1,opt,name=Rehash,proto3" json:"Rehash,omitempty"`
}

func (x *RefreshRepositoryRequest) Reset() {
	*x = RefreshRepositoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshRepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshRepositoryRequest) ProtoMessage() {}

func (x *RefreshRepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshRepositoryRequest.ProtoReflect.Descriptor instead.
func (*RefreshRepositoryRequest) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{10}
}

func (x *RefreshRepositoryRequest) GetRehash() bool {
	if x != nil {
		return x.Rehash
	}
	return false
}

type ScanMirrorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         int32                    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	AutoEnable bool                     `protobuf:"varint,2,opt,name=AutoEnable,proto3" json:"AutoEnable,omitempty"`
	Protocol   ScanMirrorRequest_Method `protobuf:"varint,3,opt,name=Protocol,proto3,enum=ScanMirrorRequest_Method" json:"Protocol,omitempty"`
}

func (x *ScanMirrorRequest) Reset() {
	*x = ScanMirrorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanMirrorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanMirrorRequest) ProtoMessage() {}

func (x *ScanMirrorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanMirrorRequest.ProtoReflect.Descriptor instead.
func (*ScanMirrorRequest) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{11}
}

func (x *ScanMirrorRequest) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ScanMirrorRequest) GetAutoEnable() bool {
	if x != nil {
		return x.AutoEnable
	}
	return false
}

func (x *ScanMirrorRequest) GetProtocol() ScanMirrorRequest_Method {
	if x != nil {
		return x.Protocol
	}
	return ScanMirrorRequest_ALL
}

type ScanMirrorReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled      bool  `protobuf:"varint,1,opt,name=Enabled,proto3" json:"Enabled,omitempty"`
	FilesIndexed int64 `protobuf:"varint,2,opt,name=FilesIndexed,proto3" json:"FilesIndexed,omitempty"`
	KnownIndexed int64 `protobuf:"varint,3,opt,name=KnownIndexed,proto3" json:"KnownIndexed,omitempty"`
	Removed      int64 `protobuf:"varint,4,opt,name=Removed,proto3" json:"Removed,omitempty"`
	TZOffsetMs   int64 `protobuf:"varint,5,opt,name=TZOffsetMs,proto3" json:"TZOffsetMs,omitempty"`
}

func (x *ScanMirrorReply) Reset() {
	*x = ScanMirrorReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanMirrorReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanMirrorReply) ProtoMessage() {}

func (x *ScanMirrorReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanMirrorReply.ProtoReflect.Descriptor instead.
func (*ScanMirrorReply) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{12}
}

func (x *ScanMirrorReply) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ScanMirrorReply) GetFilesIndexed() int64 {
	if x != nil {
		return x.FilesIndexed
	}
	return 0
}

func (x *ScanMirrorReply) GetKnownIndexed() int64 {
	if x != nil {
		return x.KnownIndexed
	}
	return 0
}

func (x *ScanMirrorReply) GetRemoved() int64 {
	if x != nil {
		return x.Removed
	}
	return 0
}

func (x *ScanMirrorReply) GetTZOffsetMs() int64 {
	if x != nil {
		return x.TZOffsetMs
	}
	return 0
}

type StatsFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pattern   string               `protobuf:"bytes,1,opt,name=Pattern,proto3" json:"Pattern,omitempty"`
	DateStart *timestamp.Timestamp `protobuf:"bytes,2,opt,name=DateStart,proto3" json:"DateStart,omitempty"`
	DateEnd   *timestamp.Timestamp `protobuf:"bytes,3,opt,name=DateEnd,proto3" json:"DateEnd,omitempty"`
}

func (x *StatsFileRequest) Reset() {
	*x = StatsFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsFileRequest) ProtoMessage() {}

func (x *StatsFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsFileRequest.ProtoReflect.Descriptor instead.
func (*StatsFileRequest) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{13}
}

func (x *StatsFileRequest) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *StatsFileRequest) GetDateStart() *timestamp.Timestamp {
	if x != nil {
		return x.DateStart
	}
	return nil
}

func (x *StatsFileRequest) GetDateEnd() *timestamp.Timestamp {
	if x != nil {
		return x.DateEnd
	}
	return nil
}

type StatsFileReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files map[string]int64 `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *StatsFileReply) Reset() {
	*x = StatsFileReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsFileReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsFileReply) ProtoMessage() {}

func (x *StatsFileReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsFileReply.ProtoReflect.Descriptor instead.
func (*StatsFileReply) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{14}
}

func (x *StatsFileReply) GetFiles() map[string]int64 {
	if x != nil {
		return x.Files
	}
	return nil
}

type StatsMirrorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        int32                `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	DateStart *timestamp.Timestamp `protobuf:"bytes,2,opt,name=DateStart,proto3" json:"DateStart,omitempty"`
	DateEnd   *timestamp.Timestamp `protobuf:"bytes,3,opt,name=DateEnd,proto3" json:"DateEnd,omitempty"`
}

func (x *StatsMirrorRequest) Reset() {
	*x = StatsMirrorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsMirrorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsMirrorRequest) ProtoMessage() {}

func (x *StatsMirrorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsMirrorRequest.ProtoReflect.Descriptor instead.
func (*StatsMirrorRequest) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{15}
}

func (x *StatsMirrorRequest) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *StatsMirrorRequest) GetDateStart() *timestamp.Timestamp {
	if x != nil {
		return x.DateStart
	}
	return nil
}

func (x *StatsMirrorRequest) GetDateEnd() *timestamp.Timestamp {
	if x != nil {
		return x.DateEnd
	}
	return nil
}

type StatsMirrorReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mirror   *Mirror `protobuf:"bytes,1,opt,name=Mirror,proto3" json:"Mirror,omitempty"`
	Requests int64   `protobuf:"varint,2,opt,name=Requests,proto3" json:"Requests,omitempty"`
	Bytes    int64   `protobuf:"varint,3,opt,name=Bytes,proto3" json:"Bytes,omitempty"`
}

func (x *StatsMirrorReply) Reset() {
	*x = StatsMirrorReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsMirrorReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsMirrorReply) ProtoMessage() {}

func (x *StatsMirrorReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsMirrorReply.ProtoReflect.Descriptor instead.
func (*StatsMirrorReply) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{16}
}

func (x *StatsMirrorReply) GetMirror() *Mirror {
	if x != nil {
		return x.Mirror
	}
	return nil
}

func (x *StatsMirrorReply) GetRequests() int64 {
	if x != nil {
		return x.Requests
	}
	return 0
}

func (x *StatsMirrorReply) GetBytes() int64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

type GetMirrorLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         int32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	MaxResults int32 `protobuf:"varint,2,opt,name=MaxResults,proto3" json:"MaxResults,omitempty"`
}

func (x *GetMirrorLogsRequest) Reset() {
	*x = GetMirrorLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMirrorLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMirrorLogsRequest) ProtoMessage() {}

func (x *GetMirrorLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMirrorLogsRequest.ProtoReflect.Descriptor instead.
func (*GetMirrorLogsRequest) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{17}
}

func (x *GetMirrorLogsRequest) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *GetMirrorLogsRequest) GetMaxResults() int32 {
	if x != nil {
		return x.MaxResults
	}
	return 0
}

type GetMirrorLogsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Line []string `protobuf:"bytes,1,rep,name=line,proto3" json:"line,omitempty"`
}

func (x *GetMirrorLogsReply) Reset() {
	*x = GetMirrorLogsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMirrorLogsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMirrorLogsReply) ProtoMessage() {}

func (x *GetMirrorLogsReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMirrorLogsReply.ProtoReflect.Descriptor instead.
func (*GetMirrorLogsReply) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{18}
}

func (x *GetMirrorLogsReply) GetLine() []string {
	if x != nil {
		return x.Line
	}
	return nil
}

var File_rpc_proto protoreflect.FileDescriptor

var file_rpc_proto_rawDesc = []byte{
	0x0a, 0x09, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa0, 0x01, 0x0a, 0x0c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x6f,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x47,
	0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x53, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x4f, 0x53, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x72, 0x63, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x41, 0x72, 0x63, 0x68, 0x12, 0x1e, 0x0a, 0x0a,
	0x47, 0x6f, 0x4d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x47, 0x6f, 0x4d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x63, 0x73, 0x22, 0x28, 0x0a, 0x0c,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0xdc, 0x08, 0x0a, 0x06, 0x4d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x74, 0x74, 0x70, 0x55, 0x52, 0x4c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x48, 0x74, 0x74, 0x70, 0x55, 0x52, 0x4c, 0x12,
	0x1a, 0x0a, 0x08, 0x52, 0x73, 0x79, 0x6e, 0x63, 0x55, 0x52, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x52, 0x73, 0x79, 0x6e, 0x63, 0x55, 0x52, 0x4c, 0x12, 0x16, 0x0a, 0x06, 0x46,
	0x74, 0x70, 0x55, 0x52, 0x4c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x74, 0x70,
	0x55, 0x52, 0x4c, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72,
	0x55, 0x52, 0x4c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x70, 0x6f, 0x6e, 0x73,
	0x6f, 0x72, 0x55, 0x52, 0x4c, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72,
	0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x52, 0x4c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53,
	0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x52, 0x4c, 0x12, 0x1c, 0x0a,
	0x09, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x43,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x6c,
	0x79, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x6e, 0x6c, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f,
	0x6e, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x53, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x41, 0x53, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x43,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x73, 0x6e,
	0x75, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x41, 0x73, 0x6e, 0x75, 0x6d, 0x12,
	0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x55, 0x70, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x02, 0x55, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x45, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0a, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x53, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x12, 0x36, 0x0a,
	0x08, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x4c, 0x61, 0x73,
	0x74, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x4a, 0x0a, 0x12, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x4c,
	0x61, 0x73, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x53, 0x79, 0x6e,
	0x63, 0x12, 0x3c, 0x0a, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x22, 0x34, 0x0a, 0x0f, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x21, 0x0a, 0x07, 0x4d, 0x69, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4d, 0x69, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x07, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x2e, 0x0a, 0x08, 0x4d,
	0x69, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x31, 0x0a, 0x0a, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x07, 0x4d, 0x69, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4d, 0x69, 0x72,
	0x72, 0x6f, 0x72, 0x49, 0x44, 0x52, 0x07, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x3f,
	0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22,
	0x21, 0x0a, 0x0f, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x49, 0x44, 0x22, 0xdc, 0x01, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x53, 0x4e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x41, 0x53, 0x4e, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x57, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x22, 0x27, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x69, 0x66, 0x66, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x69, 0x66, 0x66, 0x22, 0x32, 0x0a, 0x18, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x52, 0x65, 0x68, 0x61, 0x73, 0x68, 0x22, 0xa1,
	0x01, 0x0a, 0x11, 0x53, 0x63, 0x61, 0x6e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x6f, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x41, 0x75, 0x74, 0x6f, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x4d, 0x69, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x25, 0x0a, 0x06, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x46, 0x54, 0x50, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x53, 0x59, 0x4e, 0x43,
	0x10, 0x02, 0x22, 0xad, 0x01, 0x0a, 0x0f, 0x53, 0x63, 0x61, 0x6e, 0x4d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4b, 0x6e, 0x6f, 0x77,
	0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x5a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x4d, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x54, 0x5a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x4d, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x12, 0x38, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x44, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x44,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x44, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x64, 0x22, 0x7c, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x94, 0x01, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x44, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x34, 0x0a, 0x07, 0x44, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x44,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x22, 0x65, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d,
	0x69, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1f, 0x0a, 0x06, 0x4d, 0x69,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4d, 0x69, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x06, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x46, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4d, 0x61, 0x78, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x28, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x72, 0x72,
	0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x32,
	0xfa, 0x06, 0x0a, 0x03, 0x43, 0x4c, 0x49, 0x12, 0x35, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0d, 0x2e,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3b,
	0x0a, 0x07, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x06, 0x52,
	0x65, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x10, 0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x29, 0x0a, 0x0a, 0x4d,
	0x69, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x2e, 0x4d, 0x69, 0x72, 0x72,
	0x6f, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x4d, 0x69,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x4d, 0x69, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x07, 0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x0f, 0x2e, 0x41,
	0x64, 0x64, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x2d, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x07, 0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x12, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3a,
	0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x10,
	0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x11, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x19, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x0a, 0x53, 0x63, 0x61, 0x6e, 0x4d, 0x69, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x12, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x4d, 0x69, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x09, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x11, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x37, 0x0a,
	0x0b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x13, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x11, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x3d, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f, 0x67,
	0x73, 0x12, 0x15, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x69,
	0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x2b, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x0d,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpc_proto_rawDescOnce sync.Once
	file_rpc_proto_rawDescData = file_rpc_proto_rawDesc
)

func file_rpc_proto_rawDescGZIP() []byte {
	file_rpc_proto_rawDescOnce.Do(func() {
		file_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_proto_rawDescData)
	})
	return file_rpc_proto_rawDescData
}

var file_rpc_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_rpc_proto_goTypes = []interface{}{
	(ScanMirrorRequest_Method)(0),    // 0: ScanMirrorRequest.Method
	(*VersionReply)(nil),             // 1: VersionReply
	(*MatchRequest)(nil),             // 2: MatchRequest
	(*Mirror)(nil),                   // 3: Mirror
	(*MirrorListReply)(nil),          // 4: MirrorListReply
	(*MirrorID)(nil),                 // 5: MirrorID
	(*MatchReply)(nil),               // 6: MatchReply
	(*ChangeStatusRequest)(nil),      // 7: ChangeStatusRequest
	(*MirrorIDRequest)(nil),          // 8: MirrorIDRequest
	(*AddMirrorReply)(nil),           // 9: AddMirrorReply
	(*UpdateMirrorReply)(nil),        // 10: UpdateMirrorReply
	(*RefreshRepositoryRequest)(nil), // 11: RefreshRepositoryRequest
	(*ScanMirrorRequest)(nil),        // 12: ScanMirrorRequest
	(*ScanMirrorReply)(nil),          // 13: ScanMirrorReply
	(*StatsFileRequest)(nil),         // 14: StatsFileRequest
	(*StatsFileReply)(nil),           // 15: StatsFileReply
	(*StatsMirrorRequest)(nil),       // 16: StatsMirrorRequest
	(*StatsMirrorReply)(nil),         // 17: StatsMirrorReply
	(*GetMirrorLogsRequest)(nil),     // 18: GetMirrorLogsRequest
	(*GetMirrorLogsReply)(nil),       // 19: GetMirrorLogsReply
	nil,                              // 20: StatsFileReply.FilesEntry
	(*timestamp.Timestamp)(nil),      // 21: google.protobuf.Timestamp
	(*empty.Empty)(nil),              // 22: google.protobuf.Empty
}
var file_rpc_proto_depIdxs = []int32{
	21, // 0: Mirror.StateSince:type_name -> google.protobuf.Timestamp
	21, // 1: Mirror.LastSync:type_name -> google.protobuf.Timestamp
	21, // 2: Mirror.LastSuccessfulSync:type_name -> google.protobuf.Timestamp
	21, // 3: Mirror.LastModTime:type_name -> google.protobuf.Timestamp
	3,  // 4: MirrorListReply.Mirrors:type_name -> Mirror
	5,  // 5: MatchReply.Mirrors:type_name -> MirrorID
	0,  // 6: ScanMirrorRequest.Protocol:type_name -> ScanMirrorRequest.Method
	21, // 7: StatsFileRequest.DateStart:type_name -> google.protobuf.Timestamp
	21, // 8: StatsFileRequest.DateEnd:type_name -> google.protobuf.Timestamp
	20, // 9: StatsFileReply.files:type_name -> StatsFileReply.FilesEntry
	21, // 10: StatsMirrorRequest.DateStart:type_name -> google.protobuf.Timestamp
	21, // 11: StatsMirrorRequest.DateEnd:type_name -> google.protobuf.Timestamp
	3,  // 12: StatsMirrorReply.Mirror:type_name -> Mirror
	22, // 13: CLI.GetVersion:input_type -> google.protobuf.Empty
	22, // 14: CLI.Upgrade:input_type -> google.protobuf.Empty
	22, // 15: CLI.Reload:input_type -> google.protobuf.Empty
	7,  // 16: CLI.ChangeStatus:input_type -> ChangeStatusRequest
	22, // 17: CLI.List:input_type -> google.protobuf.Empty
	8,  // 18: CLI.MirrorInfo:input_type -> MirrorIDRequest
	3,  // 19: CLI.AddMirror:input_type -> Mirror
	3,  // 20: CLI.UpdateMirror:input_type -> Mirror
	8,  // 21: CLI.RemoveMirror:input_type -> MirrorIDRequest
	11, // 22: CLI.RefreshRepository:input_type -> RefreshRepositoryRequest
	12, // 23: CLI.ScanMirror:input_type -> ScanMirrorRequest
	14, // 24: CLI.StatsFile:input_type -> StatsFileRequest
	16, // 25: CLI.StatsMirror:input_type -> StatsMirrorRequest
	22, // 26: CLI.Ping:input_type -> google.protobuf.Empty
	18, // 27: CLI.GetMirrorLogs:input_type -> GetMirrorLogsRequest
	2,  // 28: CLI.MatchMirror:input_type -> MatchRequest
	1,  // 29: CLI.GetVersion:output_type -> VersionReply
	22, // 30: CLI.Upgrade:output_type -> google.protobuf.Empty
	22, // 31: CLI.Reload:output_type -> google.protobuf.Empty
	22, // 32: CLI.ChangeStatus:output_type -> google.protobuf.Empty
	4,  // 33: CLI.List:output_type -> MirrorListReply
	3,  // 34: CLI.MirrorInfo:output_type -> Mirror
	9,  // 35: CLI.AddMirror:output_type -> AddMirrorReply
	10, // 36: CLI.UpdateMirror:output_type -> UpdateMirrorReply
	22, // 37: CLI.RemoveMirror:output_type -> google.protobuf.Empty
	22, // 38: CLI.RefreshRepository:output_type -> google.protobuf.Empty
	13, // 39: CLI.ScanMirror:output_type -> ScanMirrorReply
	15, // 40: CLI.StatsFile:output_type -> StatsFileReply
	17, // 41: CLI.StatsMirror:output_type -> StatsMirrorReply
	22, // 42: CLI.Ping:output_type -> google.protobuf.Empty
	19, // 43: CLI.GetMirrorLogs:output_type -> GetMirrorLogsReply
	6,  // 44: CLI.MatchMirror:output_type -> MatchReply
	29, // [29:45] is the sub-list for method output_type
	13, // [13:29] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_rpc_proto_init() }
func file_rpc_proto_init() {
	if File_rpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mirror); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MirrorListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MirrorID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MirrorIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMirrorReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMirrorReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshRepositoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanMirrorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanMirrorReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsFileReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsMirrorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsMirrorReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMirrorLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMirrorLogsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpc_proto_goTypes,
		DependencyIndexes: file_rpc_proto_depIdxs,
		EnumInfos:         file_rpc_proto_enumTypes,
		MessageInfos:      file_rpc_proto_msgTypes,
	}.Build()
	File_rpc_proto = out.File
	file_rpc_proto_rawDesc = nil
	file_rpc_proto_goTypes = nil
	file_rpc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CLIClient is the client API for CLI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CLIClient interface {
	GetVersion(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VersionReply, error)
	Upgrade(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	Reload(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	ChangeStatus(ctx context.Context, in *ChangeStatusRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MirrorListReply, error)
	MirrorInfo(ctx context.Context, in *MirrorIDRequest, opts ...grpc.CallOption) (*Mirror, error)
	AddMirror(ctx context.Context, in *Mirror, opts ...grpc.CallOption) (*AddMirrorReply, error)
	UpdateMirror(ctx context.Context, in *Mirror, opts ...grpc.CallOption) (*UpdateMirrorReply, error)
	RemoveMirror(ctx context.Context, in *MirrorIDRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RefreshRepository(ctx context.Context, in *RefreshRepositoryRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ScanMirror(ctx context.Context, in *ScanMirrorRequest, opts ...grpc.CallOption) (*ScanMirrorReply, error)
	StatsFile(ctx context.Context, in *StatsFileRequest, opts ...grpc.CallOption) (*StatsFileReply, error)
	StatsMirror(ctx context.Context, in *StatsMirrorRequest, opts ...grpc.CallOption) (*StatsMirrorReply, error)
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	GetMirrorLogs(ctx context.Context, in *GetMirrorLogsRequest, opts ...grpc.CallOption) (*GetMirrorLogsReply, error)
	// Tools
	MatchMirror(ctx context.Context, in *MatchRequest, opts ...grpc.CallOption) (*MatchReply, error)
}

type cLIClient struct {
	cc grpc.ClientConnInterface
}

func NewCLIClient(cc grpc.ClientConnInterface) CLIClient {
	return &cLIClient{cc}
}

func (c *cLIClient) GetVersion(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VersionReply, error) {
	out := new(VersionReply)
	err := c.cc.Invoke(ctx, "/CLI/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) Upgrade(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/CLI/Upgrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) Reload(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/CLI/Reload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) ChangeStatus(ctx context.Context, in *ChangeStatusRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/CLI/ChangeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MirrorListReply, error) {
	out := new(MirrorListReply)
	err := c.cc.Invoke(ctx, "/CLI/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) MirrorInfo(ctx context.Context, in *MirrorIDRequest, opts ...grpc.CallOption) (*Mirror, error) {
	out := new(Mirror)
	err := c.cc.Invoke(ctx, "/CLI/MirrorInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) AddMirror(ctx context.Context, in *Mirror, opts ...grpc.CallOption) (*AddMirrorReply, error) {
	out := new(AddMirrorReply)
	err := c.cc.Invoke(ctx, "/CLI/AddMirror", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) UpdateMirror(ctx context.Context, in *Mirror, opts ...grpc.CallOption) (*UpdateMirrorReply, error) {
	out := new(UpdateMirrorReply)
	err := c.cc.Invoke(ctx, "/CLI/UpdateMirror", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) RemoveMirror(ctx context.Context, in *MirrorIDRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/CLI/RemoveMirror", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) RefreshRepository(ctx context.Context, in *RefreshRepositoryRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/CLI/RefreshRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) ScanMirror(ctx context.Context, in *ScanMirrorRequest, opts ...grpc.CallOption) (*ScanMirrorReply, error) {
	out := new(ScanMirrorReply)
	err := c.cc.Invoke(ctx, "/CLI/ScanMirror", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) StatsFile(ctx context.Context, in *StatsFileRequest, opts ...grpc.CallOption) (*StatsFileReply, error) {
	out := new(StatsFileReply)
	err := c.cc.Invoke(ctx, "/CLI/StatsFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) StatsMirror(ctx context.Context, in *StatsMirrorRequest, opts ...grpc.CallOption) (*StatsMirrorReply, error) {
	out := new(StatsMirrorReply)
	err := c.cc.Invoke(ctx, "/CLI/StatsMirror", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/CLI/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) GetMirrorLogs(ctx context.Context, in *GetMirrorLogsRequest, opts ...grpc.CallOption) (*GetMirrorLogsReply, error) {
	out := new(GetMirrorLogsReply)
	err := c.cc.Invoke(ctx, "/CLI/GetMirrorLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) MatchMirror(ctx context.Context, in *MatchRequest, opts ...grpc.CallOption) (*MatchReply, error) {
	out := new(MatchReply)
	err := c.cc.Invoke(ctx, "/CLI/MatchMirror", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CLIServer is the server API for CLI service.
type CLIServer interface {
	GetVersion(context.Context, *empty.Empty) (*VersionReply, error)
	Upgrade(context.Context, *empty.Empty) (*empty.Empty, error)
	Reload(context.Context, *empty.Empty) (*empty.Empty, error)
	ChangeStatus(context.Context, *ChangeStatusRequest) (*empty.Empty, error)
	List(context.Context, *empty.Empty) (*MirrorListReply, error)
	MirrorInfo(context.Context, *MirrorIDRequest) (*Mirror, error)
	AddMirror(context.Context, *Mirror) (*AddMirrorReply, error)
	UpdateMirror(context.Context, *Mirror) (*UpdateMirrorReply, error)
	RemoveMirror(context.Context, *MirrorIDRequest) (*empty.Empty, error)
	RefreshRepository(context.Context, *RefreshRepositoryRequest) (*empty.Empty, error)
	ScanMirror(context.Context, *ScanMirrorRequest) (*ScanMirrorReply, error)
	StatsFile(context.Context, *StatsFileRequest) (*StatsFileReply, error)
	StatsMirror(context.Context, *StatsMirrorRequest) (*StatsMirrorReply, error)
	Ping(context.Context, *empty.Empty) (*empty.Empty, error)
	GetMirrorLogs(context.Context, *GetMirrorLogsRequest) (*GetMirrorLogsReply, error)
	// Tools
	MatchMirror(context.Context, *MatchRequest) (*MatchReply, error)
}

// UnimplementedCLIServer can be embedded to have forward compatible implementations.
type UnimplementedCLIServer struct {
}

func (*UnimplementedCLIServer) GetVersion(context.Context, *empty.Empty) (*VersionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (*UnimplementedCLIServer) Upgrade(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upgrade not implemented")
}
func (*UnimplementedCLIServer) Reload(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reload not implemented")
}
func (*UnimplementedCLIServer) ChangeStatus(context.Context, *ChangeStatusRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeStatus not implemented")
}
func (*UnimplementedCLIServer) List(context.Context, *empty.Empty) (*MirrorListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedCLIServer) MirrorInfo(context.Context, *MirrorIDRequest) (*Mirror, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MirrorInfo not implemented")
}
func (*UnimplementedCLIServer) AddMirror(context.Context, *Mirror) (*AddMirrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMirror not implemented")
}
func (*UnimplementedCLIServer) UpdateMirror(context.Context, *Mirror) (*UpdateMirrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMirror not implemented")
}
func (*UnimplementedCLIServer) RemoveMirror(context.Context, *MirrorIDRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMirror not implemented")
}
func (*UnimplementedCLIServer) RefreshRepository(context.Context, *RefreshRepositoryRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshRepository not implemented")
}
func (*UnimplementedCLIServer) ScanMirror(context.Context, *ScanMirrorRequest) (*ScanMirrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanMirror not implemented")
}
func (*UnimplementedCLIServer) StatsFile(context.Context, *StatsFileRequest) (*StatsFileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatsFile not implemented")
}
func (*UnimplementedCLIServer) StatsMirror(context.Context, *StatsMirrorRequest) (*StatsMirrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatsMirror not implemented")
}
func (*UnimplementedCLIServer) Ping(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedCLIServer) GetMirrorLogs(context.Context, *GetMirrorLogsRequest) (*GetMirrorLogsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMirrorLogs not implemented")
}
func (*UnimplementedCLIServer) MatchMirror(context.Context, *MatchRequest) (*MatchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchMirror not implemented")
}

func RegisterCLIServer(s *grpc.Server, srv CLIServer) {
	s.RegisterService(&_CLI_serviceDesc, srv)
}

func _CLI_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CLI/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).GetVersion(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_Upgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).Upgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CLI/Upgrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).Upgrade(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_Reload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).Reload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CLI/Reload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).Reload(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_ChangeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).ChangeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CLI/ChangeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).ChangeStatus(ctx, req.(*ChangeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CLI/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).List(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_MirrorInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MirrorIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).MirrorInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CLI/MirrorInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).MirrorInfo(ctx, req.(*MirrorIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_AddMirror_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mirror)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).AddMirror(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CLI/AddMirror",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).AddMirror(ctx, req.(*Mirror))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_UpdateMirror_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mirror)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).UpdateMirror(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CLI/UpdateMirror",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).UpdateMirror(ctx, req.(*Mirror))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_RemoveMirror_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MirrorIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).RemoveMirror(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CLI/RemoveMirror",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).RemoveMirror(ctx, req.(*MirrorIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_RefreshRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).RefreshRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CLI/RefreshRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).RefreshRepository(ctx, req.(*RefreshRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_ScanMirror_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanMirrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).ScanMirror(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CLI/ScanMirror",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).ScanMirror(ctx, req.(*ScanMirrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_StatsFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).StatsFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CLI/StatsFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).StatsFile(ctx, req.(*StatsFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_StatsMirror_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsMirrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).StatsMirror(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CLI/StatsMirror",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).StatsMirror(ctx, req.(*StatsMirrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CLI/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_GetMirrorLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMirrorLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).GetMirrorLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CLI/GetMirrorLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).GetMirrorLogs(ctx, req.(*GetMirrorLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_MatchMirror_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).MatchMirror(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CLI/MatchMirror",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).MatchMirror(ctx, req.(*MatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CLI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CLI",
	HandlerType: (*CLIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _CLI_GetVersion_Handler,
		},
		{
			MethodName: "Upgrade",
			Handler:    _CLI_Upgrade_Handler,
		},
		{
			MethodName: "Reload",
			Handler:    _CLI_Reload_Handler,
		},
		{
			MethodName: "ChangeStatus",
			Handler:    _CLI_ChangeStatus_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CLI_List_Handler,
		},
		{
			MethodName: "MirrorInfo",
			Handler:    _CLI_MirrorInfo_Handler,
		},
		{
			MethodName: "AddMirror",
			Handler:    _CLI_AddMirror_Handler,
		},
		{
			MethodName: "UpdateMirror",
			Handler:    _CLI_UpdateMirror_Handler,
		},
		{
			MethodName: "RemoveMirror",
			Handler:    _CLI_RemoveMirror_Handler,
		},
		{
			MethodName: "RefreshRepository",
			Handler:    _CLI_RefreshRepository_Handler,
		},
		{
			MethodName: "ScanMirror",
			Handler:    _CLI_ScanMirror_Handler,
		},
		{
			MethodName: "StatsFile",
			Handler:    _CLI_StatsFile_Handler,
		},
		{
			MethodName: "StatsMirror",
			Handler:    _CLI_StatsMirror_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _CLI_Ping_Handler,
		},
		{
			MethodName: "GetMirrorLogs",
			Handler:    _CLI_GetMirrorLogs_Handler,
		},
		{
			MethodName: "MatchMirror",
			Handler:    _CLI_MatchMirror_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
